	//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class AverageCrossover: Strategy
	{
		private SMA fastSMA;
		private SMA slowSMA;
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									  = @"This strategy will trade when the 5 moving average crosses the 20 moving average";
				Name										      = "SimpleMovingAverageCrossover";
				Calculate									    = Calculate.OnBarClose;
				EntriesPerDirection						= 1;
				EntryHandling								  = EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy	= true;
				ExitOnSessionCloseSeconds			= 30;
				IsFillLimitOnTouch						= false;
				MaximumBarsLookBack						= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution					  = OrderFillResolution.Standard;
				Slippage									    = 0;
				StartBehavior							  	= StartBehavior.WaitUntilFlat;
				TimeInForce									  = TimeInForce.Gtc;
				TraceOrders									  = false;
				RealtimeErrorHandling					= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling						= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade						= 20;
				Fast                          = 5;
				Slow                          = 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= true;
        
			}
			 if (State == State.Configure)
			{
			Print("Here");
				//När vi är i en levande position, så har vi 100$ tagning delvinst. 
				SetProfitTarget(CalculationMode.Currency, 100);
				
				//Stoppar vid förlust av 50$
				SetStopLoss(CalculationMode.Percent, 50);
				
				fastSMA = SMA(Fast);
				slowSMA	= SMA(Slow);
				
				fastSMA.Plots[0].Brush = Brushes.Goldenrod;
				slowSMA.Plots[0].Brush = Brushes.SeaGreen;
				
				AddChartIndicator(fastSMA); 
				AddChartIndicator(slowSMA); 
			}
		}

		protected override void OnBarUpdate()
		{
			if (BarsInProgress != 0)
				return; 
			
			if (CrossAbove(fastSMA, slowSMA, 1))
				EnterLong();
			
		}
		
		#region Properties
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Fast", GroupName = "NinjaScriptStrategyParameters", Order = 0)]
		public int Fast
		{ get; set; }
		
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Slow", GroupName = "NinjaScriptStrategyParameter", Order = 1)] 
		public int Slow 
		{ get; set;} 
		#endregion
	}
}
		
        
		
	

